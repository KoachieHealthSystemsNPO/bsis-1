package backingform.validator;

import java.util.Date;

import javax.persistence.NoResultException;

import model.donation.Donation;
import model.donationbatch.DonationBatch;
import model.donor.Donor;
import model.location.Location;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;

import repository.DonationBatchRepository;
import repository.DonationRepository;
import repository.DonorRepository;
import repository.SequenceNumberRepository;
import service.GeneralConfigAccessorService;
import utils.CustomDateFormatter;
import backingform.DonationBackingForm;

@Component
public class DonationBackingFormValidator extends BaseValidator<DonationBackingForm> {
  
  private static final Logger LOGGER = Logger.getLogger(DonationBackingFormValidator.class);
  
  @Autowired
  private DonorRepository donorRepository;
  
  @Autowired
  private DonationRepository donationRepository;
  
  @Autowired
  private DonationBatchRepository donationBatchRepository;
  
  @Autowired
  private SequenceNumberRepository sequenceNumberRepository;
  
  @Autowired
  AdverseEventBackingFormValidator adverseEventBackingFormValidator;
  
  @Autowired
  private GeneralConfigAccessorService generalConfigAccessorService;

  @Override
  public void validateForm(DonationBackingForm form, Errors errors) {

    updateAutoGeneratedFields(form);

    Donation donation = form.getDonation();
    if (isDuplicateDonationIdentificationNumber(donation))
      errors.rejectValue("donation.donationIdentificationNumber", "donationIdentificationNumber.nonunique",
          "There exists a donation with the same donation identification number.");

    String donationDate = form.getDonationDate();
    if (!CustomDateFormatter.isDateStringValid(donationDate))
      errors.rejectValue("donation.donationDate", "donationDate.incorrect",
          CustomDateFormatter.getDateErrorMessage());

    updateRelatedEntities(form);
    inheritParametersFromDonationBatch(form, errors);
    Donor donor = form.getDonor();
    if (donor == null) {
      errors.rejectValue("donation.donor", "donor.invalid", "Please supply a valid donor");
    }

    if(donation.getBleedStartTime() != null || donation.getBleedEndTime() != null){
        validateBleedTimes(donation.getBleedStartTime(), donation.getBleedEndTime(), errors);
    }

    Location venue = form.getDonation().getVenue();
    if (venue == null) {
      errors.rejectValue("donation.venue", "venue.empty",
        "Venue is required.");
    } 
    else if (venue.getIsVenue() == false) {
      errors.rejectValue("donation.venue", "venue.invalid",
    	"Location is not a Venue.");
    } 

    validateBloodPressure(form,errors);
    validateHaemoglobinCount(form, errors);
    validateWeight(form, errors);
    validatePulse(form, errors);
    
    adverseEventBackingFormValidator.validate(form.getAdverseEvent(), errors);

    commonFieldChecks(form, errors);
  }
  
  @Override
  public String getFormName() {
    return "donation";
  }
  
  private void validateBleedTimes(Date bleedStartTime, Date bleedEndTime, Errors errors){
      if(bleedStartTime == null){
          errors.rejectValue("donation.bleedStartTime", "bleedStartTime.empty", "This is required");
          return;
      }
      if(bleedEndTime == null){
          errors.rejectValue("donation.bleedEndTime", "bleedEndTime.empty", "This is required");
          return;
      }
      if(bleedStartTime.after(bleedEndTime))
          errors.rejectValue("donation", "bleedEndTime.outOfRange", "Bleed End time should be after start time");

  }

  private void validateBloodPressure(DonationBackingForm donationBackingForm, Errors errors) {
	  
    Integer bloodPressureSystolic = null;
    Integer bloodPressureDiastolic = null;

    Integer bloodPressureSystolicMin = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.bpSystolicMin"));
    Integer bloodPressureSystolicMax = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.bpSystolicMax"));

    Integer bloodPressureDiastolicMin = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.bpDiastolicMin"));
    Integer bloodPressureDiastolicMax = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.bpDiastolicMax"));

    if (donationBackingForm.getBloodPressureSystolic() != null) {
      bloodPressureSystolic = donationBackingForm.getBloodPressureSystolic().intValue();
      if (bloodPressureSystolic < bloodPressureSystolicMin)
        errors.rejectValue("donation.bloodPressureSystolic", "bloodPressureSystolic.outOfRange", "BP value should be above " + bloodPressureSystolicMin);
      if (bloodPressureSystolic > bloodPressureSystolicMax)
        errors.rejectValue("donation.bloodPressureSystolic", "bloodPressureSystolic.outOfRange", "BP value should be below " + bloodPressureSystolicMax);
    }

    if (donationBackingForm.getBloodPressureDiastolic() != null) {
      bloodPressureDiastolic = donationBackingForm.getBloodPressureDiastolic().intValue();
      if (bloodPressureDiastolic < bloodPressureDiastolicMin)
        errors.rejectValue("donation.bloodPressureDiastolic", "bloodPressureDiastolic.outOfRange", "BP value should be above " + bloodPressureDiastolicMax);
      if (bloodPressureDiastolic > bloodPressureDiastolicMax)
        errors.rejectValue("donation.bloodPressureDiastolic", "bloodPressureDiastolic.outOfRange", "BP value should be below " + bloodPressureDiastolicMax);
    }
  }

  private void validateHaemoglobinCount(DonationBackingForm donationBackingForm, Errors errors) {
    Integer haemoglobinCount = null;
    Integer hbMin = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.hbMin"));
    Integer hbMax = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.hbMax"));

    if (donationBackingForm.getHaemoglobinCount() != null) {
      haemoglobinCount = donationBackingForm.getHaemoglobinCount().intValue();
      if (haemoglobinCount < hbMin)
        errors.rejectValue("donation.haemoglobinCount", "haemoglobinCount.outOfRange", "Hb value should be above " + hbMin);
      if (haemoglobinCount > hbMax)
        errors.rejectValue("donation.haemoglobinCount", "haemoglobinCount.outOfRange", "Hb value should be below " + hbMax);
    }
  }

  private void validateWeight (DonationBackingForm donationBackingForm, Errors errors) {
    Integer weight = null;
    Integer weightMin = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.weightMin"));
    Integer weightMax = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.weightMax"));

    if (donationBackingForm.getDonorWeight() != null) {
      weight = donationBackingForm.getDonorWeight().intValue();
      if (weight < weightMin)
        errors.rejectValue("donation.donorWeight", "donorWeight.outOfRange", "Weight value should be above " + weightMin);
      if (weight > weightMax)
        errors.rejectValue("donation.donorWeight", "donorWeight.outOfRange", "Weight value should be below " + weightMax);
    }
  }

  private void validatePulse (DonationBackingForm donationBackingForm, Errors errors) {
    Integer pulse = null;
    Integer pulseMin = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.pulseMin"));
    Integer pulseMax = Integer.parseInt(generalConfigAccessorService.getGeneralConfigValueByName("donation.donor.pulseMax"));

    if (donationBackingForm.getDonorPulse() != null) {
      pulse = donationBackingForm.getDonorPulse().intValue();
      if (pulse < pulseMin)
        errors.rejectValue("donation.donorPulse", "donorPulse.outOfRange", "Pulse value should be above " + pulseMin);
      if (pulse > pulseMax)
        errors.rejectValue("donation.donorPulse", "donorPulse.outOfRange", "Pulse value should be below " + pulseMax);
    }
  }


  private void inheritParametersFromDonationBatch(
      DonationBackingForm form, Errors errors) {
    if (form.getUseParametersFromBatch()) {
      DonationBatch donationBatch = form.getDonationBatch();
      if (donationBatch == null) {
        errors.rejectValue("donation.donationBatch", "donationBatch.empty", "Donation batch should be specified");
      }
    }
  }

  private void updateAutoGeneratedFields(DonationBackingForm form) {
    if (StringUtils.isBlank(form.getDonationIdentificationNumber()) &&
        isFieldAutoGenerated("donationIdentificationNumber")) {
      form.setDonationIdentificationNumber(sequenceNumberRepository.getNextDonationIdentificationNumber());
    }
    if (StringUtils.isBlank(form.getDonationDate()) &&
        doesFieldUseCurrentTime("donationDate")) {
      form.getDonation().setDonationDate(new Date());
    }
  }

  private void updateRelatedEntities(DonationBackingForm form) {
    // set donor
    String donorNumber = form.getDonorNumber();
    Donor donor = null;
    if (donorNumber != null && !donorNumber.isEmpty()) {
      try {
        donor = donorRepository.findDonorByDonorNumber(donorNumber, false);
      } catch (NoResultException ex) {
        LOGGER.warn("Could not find Donor with donorNumber '" + donorNumber + "'. Error: " + ex.getMessage());
      }
    }
    form.setDonor(donor);
    // set donation batch
    String batchNumber = form.getDonationBatchNumber();
    DonationBatch donationBatch = null;
    if (StringUtils.isNotBlank(batchNumber)) {
      try {
        donationBatch = donationBatchRepository.findDonationBatchByBatchNumber(batchNumber);
      } catch (NoResultException ex) {
        LOGGER.warn("Could not find Donor with donorNumber '" + donorNumber + "'. Error: " + ex.getMessage());
      }
    }
    form.setDonationBatch(donationBatch);
  }
  
  private boolean isDuplicateDonationIdentificationNumber(Donation donation) {
    String donationIdentificationNumber = donation.getDonationIdentificationNumber();
    if (StringUtils.isBlank(donationIdentificationNumber)) {
      return false;
    }

    Donation existingDonation =
        donationRepository
            .findDonationByDonationIdentificationNumberIncludeDeleted(donationIdentificationNumber);
    if (existingDonation != null && !existingDonation.getId().equals(donation.getId())) {
      return true;
    }

    return false;
  }
}
