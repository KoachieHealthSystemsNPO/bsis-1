package backingform.validator;

import java.util.Date;

import model.request.Request;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;

import repository.RequestRepository;
import repository.SequenceNumberRepository;
import utils.CustomDateFormatter;
import backingform.RequestBackingForm;

@Component
public class RequestBackingFormValidator extends BaseValidator<RequestBackingForm> {

  @Autowired
  private RequestRepository requestRepository;

  @Autowired
  private SequenceNumberRepository sequenceNumberRepository;

  @Override
  public void validateForm(RequestBackingForm form, Errors errors) {
    String requestDate = form.getRequestDate();
    if (!CustomDateFormatter.isDateTimeStringValid(requestDate)) {
      errors.rejectValue("request.requestDate", "dateFormat.incorrect",
          CustomDateFormatter.getDateTimeErrorMessage());
    }
    String requiredDate = form.getRequiredDate();
    if (!CustomDateFormatter.isDateStringValid(requiredDate)) {
      errors.rejectValue("request.requiredDate", "dateFormat.incorrect",
          CustomDateFormatter.getDateErrorMessage());
    }

    updateAutogeneratedFields(form);
    if (isDuplicateRequestNumber(form.getRequest()))
      errors.rejectValue("request.requestNumber", "requestNumber.nonunique",
          "There exists a request with the same request number.");

    commonFieldChecks(form, errors);
  }

  @Override
  public String getFormName() {
    return "request";
  }

  private void updateAutogeneratedFields(RequestBackingForm form) {
    if (StringUtils.isBlank(form.getRequestNumber()) && isFieldAutoGenerated("requestNumber")) {
      form.setRequestNumber(sequenceNumberRepository.getNextRequestNumber());
    }
    if (StringUtils.isBlank(form.getRequestDate()) && doesFieldUseCurrentTime("requestDate")) {
      form.getRequest().setRequestDate(new Date());
    }
  }

  private boolean isDuplicateRequestNumber(Request request) {
    String requestNumber = request.getRequestNumber();
    if (StringUtils.isBlank(requestNumber)) {
      return false;
    }

    Request existingRequest = requestRepository.findRequestByRequestNumberIncludeDeleted(requestNumber);
    if (existingRequest != null && !existingRequest.getId().equals(request.getId())) {
      return true;
    }

    return false;
  }
}
