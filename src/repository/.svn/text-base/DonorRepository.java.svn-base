package repository;

import model.Collection;
import model.Donor;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Repository
@Transactional
public class DonorRepository {
    @PersistenceContext
    private EntityManager em;

    public void saveDonor(Donor donor) {
        em.persist(donor);
        em.flush();
    }

    public Donor updateDonor(Donor donor) {
        Donor existingDonor = find(donor.getDonorNumber(), null, null).get(0);
        existingDonor.copy(donor);
        em.merge(existingDonor);
        em.flush();
        return existingDonor;
    }

    public void deleteDonor(Long donorId) {
        Donor existingDonor = findDonorById(donorId);
        existingDonor.setIsDeleted(Boolean.TRUE);
        em.merge(existingDonor);
        em.flush();
    }

    public Donor findDonorById(Long donorId) {
        try {
            String queryString = "SELECT d FROM Donor d WHERE d.donorId = :donorId and d.isDeleted = :isDeleted";
            TypedQuery<Donor> query = em.createQuery(
                    queryString, Donor.class);
            query.setParameter("isDeleted", Boolean.FALSE);
            return query.setParameter("donorId", donorId).getSingleResult();
        } catch (NoResultException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public void deleteAllDonors() {
        Query query = em.createQuery("DELETE FROM Donor d");
        query.executeUpdate();
    }


    public List<Donor> find(String donorNumber, String firstName, String lastName) {
        if (StringUtils.hasText(donorNumber)) {
            String queryString = "SELECT d FROM Donor d WHERE d.donorNumber = :donorNumber and d.isDeleted = :isDeleted";
            TypedQuery<Donor> query = em.createQuery(
                    queryString, Donor.class);
            query.setParameter("isDeleted", Boolean.FALSE);
            List<Donor> donors = query.setParameter("donorNumber", donorNumber).getResultList();
            if (donors != null && donors.size() > 0) {
                return donors;
            } else {
                if (StringUtils.hasText(firstName) || StringUtils.hasText(lastName)) {
                    return findDonorByName(firstName, lastName);
                }
            }
        }
        if (StringUtils.hasText(firstName) || StringUtils.hasText(lastName)) {
            return findDonorByName(firstName, lastName);
        }
        return null;
    }

    private List<Donor> findDonorByName(String firstName, String lastName) {
        if (StringUtils.hasText(lastName)) {
            String queryString = "SELECT d FROM Donor d WHERE d.lastName = :lastName and d.isDeleted = :isDeleted";
            TypedQuery<Donor> query = em.createQuery(
                    queryString, Donor.class);
            query.setParameter("isDeleted", Boolean.FALSE);
            List<Donor> donors = query.setParameter("lastName", lastName).getResultList();
            if (donors == null || donors.size() == 0) {
                return null;
            }
            if (StringUtils.hasText(firstName)) {
                return filterByFirstName(donors, firstName);
            }
        } else if (StringUtils.hasText(firstName)) {
            String queryString = "SELECT d FROM Donor d WHERE d.firstName = :firstName and d.isDeleted = :isDeleted";
            TypedQuery<Donor> query = em.createQuery(
                    queryString, Donor.class);
            query.setParameter("isDeleted", Boolean.FALSE);
            List<Donor> donors = query.setParameter("firstName", firstName).getResultList();
            if (donors == null || donors.size() == 0) {
                return null;
            }
            return donors;
        }
        return null;
    }

    private List<Donor> filterByFirstName(List<Donor> donors, final String firstName) {
        List<Donor> filteredDonors = (List<Donor>) CollectionUtils.select(donors, new Predicate() {
            public boolean evaluate(Object o) {
                Donor donor = (Donor) o;
                return firstName.equals(donor.getFirstName());
            }
        });
        if (filteredDonors == null || filteredDonors.size() == 0) {
            return donors;
        } else {
            return filteredDonors;
        }

    }

    public List<Donor> getAllDonors() {
        Query query = em.createQuery("SELECT d FROM Donor d WHERE d.isDeleted = :isDeleted", Donor.class);
        query.setParameter("isDeleted", Boolean.FALSE);
        return query.getResultList();
    }

    public List<Collection> getDonorHistory(String donorNumber) {
        TypedQuery<Collection> query = em.createQuery(
                "SELECT c FROM Collection c WHERE c.donorNumber = :donorNumber and c.isDeleted= :isDeleted", Collection.class);
        query.setParameter("isDeleted", Boolean.FALSE);
        query.setParameter("donorNumber", donorNumber);
        List<Collection> collections = query.getResultList();
        if (org.springframework.util.CollectionUtils.isEmpty(collections)) {
            return null;
        }
        return collections;
    }
}
